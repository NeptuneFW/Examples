<?php

//#!/usr/bin/php
//#!/usr/bin/env php

require "TritonConsoleInterface.php";


function readlineTriton($prompt = null){
    if($prompt){
        echo $prompt;
    }
    $fp = fopen("php://stdin","r");
    $line = rtrim(fgets($fp, 1024));
    return $line;
}

if($argv[1] == 'create:tableFile') {
    $database = ucfirst($argv[2]);
    $table = ucfirst($argv[3]);
    if(!file_exists('Applications/Databases/' . $database . '/' . $table . 'Table.php')) {

    $tableFileContent = '
     <?php
     /**
     * Created by Neptune Framework.
     * User: Triton
     */ 
     
     class '.$table.'Table 
     {
     
        public function table($table) {
        
            // Write your table columns... Documentation : neptunefw.org
        
            return $table;
            
        }
     
     }
     
     ';

        file_put_contents('Applications/Databases/' . $database . '/' . $table . 'Table.php', $tableFileContent);

        if(file_exists('Applications/Databases/' . $database . '/' . $table . 'Table.php')) {

            if(file_get_contents('Applications/Databases/' . $database . '/' . $table . 'Table.php', $tableFileContent) == $tableFileContent)
            {
                echo "\r\nApplications/Databases/" . $database . "/" . $table . "Table.php Table file created. \r\nApplications/Databases/" . $database . "/" . $table . "Table.php Tablo dosyası oluşturuldu. \r\n";
            } else {
                echo "\r\nTable file created. However, a problem was encountered. \r\nTablo dosyası oluşturuldu. Ancak bir sorunla karşılaşıldı.\r\n";
            }
        } else {

            echo "\r\nTable file could not be created. \r\nTablo dosyası oluşturulamadı.\r\n";

        }
    } else {

        echo "\r\nApplications/Databases/" . $database . "/" . $table . "Table.php This table file already exists. Action canceled. \r\n";
        echo "Applications/Databases/" . $database . "/" . $table . "Table.php Bu tablo dosyası zaten var. İşlem iptal edildi. \r\n";

    }


}
else if($argv[1] == 'create:table') {

    $database = ucfirst($argv[2]);
    $table = ucfirst($argv[3]);

    $connectionSettings = file_get_contents("Applications/Databases/". $database . "/connection.ntconfig");

    eval("\$connectionSettings = " .$connectionSettings);

    $tConsole = new TritonConsoleInterface($database, $connectionSettings['host'], $connectionSettings['user'], $connectionSettings['pass']);

    $value = "Applications/Databases/" . $database . "/" . $table . "Table.php";

    $tConsole->createTable($value, $database);

}
else if($argv[1] == 'rename:table') {
    $database = $argv[2];
    $tableOldName = $argv[3];
    $tableNewName = $argv[4];
    rename("Applications/Databases/". $database . "/" . ucfirst($tableOldName) . "Table.php","Applications/Databases/". $database . "/" . ucfirst($tableNewName) . "Table.php");

    $tableFileNewContent = preg_replace("(class ".ucfirst($tableOldName)."Table)", "class " . ucfirst($tableNewName) . "Table",file_get_contents('Applications/Databases/'. $database . '/' . ucfirst($tableNewName) . ".php"));
    file_put_contents("Applications/Databases/". $database . "/" . ucfirst($tableNewName) . ".php", $tableFileNewContent);

    $connectionSettings = file_get_contents("Applications/Databases/". $database . "/connection.ntconfig");

    eval("\$connectionSettings = " .$connectionSettings);

    try {
        $pdoConnection = new PDO("mysql:host=" . $connectionSettings["host"] . ";dbname=" . $database, $connectionSettings['user'], $connectionSettings['pass']);
    } catch (PDOException $e) {

        echo "Üzgünüz... Veritabanı bağlantısı sırasında hata oluştu. Lütfen bağlantı bilgilerinizin doğruluğunu kontrol ediniz <br/> \r\n";
        echo "Başarılı bir veritabanı bağlantısı olmadığı için Triton devam edemiyor <br/> \r\n";
        echo "Detaylı Bilgi : <br/> " .  $e->getMessage() . " \r\n";
        die();

    }

    $pdoConnection->exec("RENAME TABLE ".$tableOldName." TO ".$tableNewName." ");

}
else if($argv[1] == 'rename:tableColumn') {

    $database = ucfirst($argv[2]);
    $table = ucfirst($argv[3]);
    $columnOldName = $argv[4];
    $columnNewName = $argv[5];

    $connectionSettings = file_get_contents("Applications/Databases/". $database . "/connection.ntconfig");

    eval("\$connectionSettings = " .$connectionSettings);

    try {
        $pdoConnection = new PDO("mysql:host=" . $connectionSettings["host"] . ";dbname=" . $database, $connectionSettings['user'], $connectionSettings['pass']);
    } catch (PDOException $e) {

        echo "Üzgünüz... Veritabanı bağlantısı sırasında hata oluştu. Lütfen bağlantı bilgilerinizin doğruluğunu kontrol ediniz <br/> \r\n";
        echo "Başarılı bir veritabanı bağlantısı olmadığı için Triton devam edemiyor <br/> \r\n";
        echo "Detaylı Bilgi : <br/> " .  $e->getMessage() . " \r\n";
        die();

    }

    $showColumns = $pdoConnection->prepare("SHOW COLUMNS FROM " . $table);
    $showColumns->execute();
    $columns = $showColumns->fetchAll();
    foreach ($columns as $column) {
        if(array_search($columnOldName, $column)){

            var_dump($column);

            $query = $pdoConnection->exec("ALTER TABLE " . $table . " CHANGE " . $columnOldName . " " . $columnNewName . " " . $column['Type'] . " " . $column['Extra']);

            $tConsole = new TritonConsoleInterface($database, $connectionSettings['host'], $connectionSettings['user'], $connectionSettings['pass']);

            $tConsole->createTableFile($table, $database);

            echo "\r\nCreated files.\r\nDosyalar oluşturuldu. \r\n";
            echo "\r\nThe query was run.\r\nSorgu çalıştırıldı. \r\n";


        }

    }

}
else if($argv[1] == 'delete:tableColumn') {

    $database = ucfirst($argv[2]);
    $table = ucfirst($argv[3]);
    $columnName = $argv[4];

    $connectionSettings = file_get_contents("Applications/Databases/". $database . "/connection.ntconfig");

    eval("\$connectionSettings = " .$connectionSettings);

    try {
        $pdoConnection = new PDO("mysql:host=" . $connectionSettings["host"] . ";dbname=" . $database, $connectionSettings['user'], $connectionSettings['pass']);
    } catch (PDOException $e) {

        echo "Üzgünüz... Veritabanı bağlantısı sırasında hata oluştu. Lütfen bağlantı bilgilerinizin doğruluğunu kontrol ediniz <br/> \r\n";
        echo "Başarılı bir veritabanı bağlantısı olmadığı için Triton devam edemiyor <br/> \r\n";
        echo "Detaylı Bilgi : <br/> " .  $e->getMessage() . " \r\n";
        die();

    }

    $query = $pdoConnection->exec("ALTER TABLE " . $table . " DROP COLUMN " . $columnName  . " ");

    $tConsole = new TritonConsoleInterface($database, $connectionSettings['host'], $connectionSettings['user'], $connectionSettings['pass']);

    $tConsole->createTableFile($table, $database);

    echo "\r\nCreated files.\r\nDosyalar oluşturuldu. \r\n";
    echo "\r\nThe query was run.\r\nSorgu çalıştırıldı. \r\n";



}
else if($argv[1] == '--model')
{
    $model = $argv[2];
    if (file_exists($model))
    {
        echo '"'.$model.'" this controller already exist.';
        exit();
    }
    $class = '<?php
class ' . $model . ' extends Model
{
    public function __construct()
    {
        parent::__construct();
    }
    public function get()
    {
        $db = $this->db;
        return $db->get("users", ["id", "=", "1"]);
    }
}';
    $dt = fopen('database/model/' . $argv[2] . '.php', 'w');
    fwrite($dt, $class);
    fclose($dt);
    echo 'database/model/' . $argv[2] . '.php file created succesfully';
}
else if($argv[1] == 'create:tableFilesFromDatabase') {
    $database = $argv[2];

    $connectionSettings = file_get_contents("Applications/Databases/". $database . "/connection.ntconfig");

    eval("\$connectionSettings = " .$connectionSettings);

    try {
        $pdoConnection = new PDO("mysql:host=" . $connectionSettings["host"] . ";dbname=" . $database, $connectionSettings['user'], $connectionSettings['pass']);
    } catch (PDOException $e) {

        echo "Üzgünüz... Veritabanı bağlantısı sırasında hata oluştu. Lütfen bağlantı bilgilerinizin doğruluğunu kontrol ediniz <br/> \r\n";
    }
    $tConsole = new TritonConsoleInterface($database, $connectionSettings['host'], $connectionSettings['user'], $connectionSettings['pass']);
    $tConsole->createTableFiles($database);


}
else if($argv[1] == 'delete:table') {

    $database = ucfirst($argv[2]);
    $table = ucfirst($argv[3]);

    $line = readlineTriton("Do yo want delete table? (Y/N) \r\nTurkish : Tabloyu silmek istediğine emin misin? (Y/N): ");
    var_dump($line);

    if($line == 'Y') {

        unlink("Applications/Databases/" . $database . "/" . $table  . ".php");
        unlink("Temp/Tables/" . $database . "/" . $table);

        $connectionSettings = file_get_contents("Applications/Databases/". $database . "/connection.ntconfig");

        eval("\$connectionSettings = " .$connectionSettings);

        try {
            $pdoConnection = new PDO("mysql:host=" . $connectionSettings["host"] . ";dbname=" . $database, $connectionSettings['user'], $connectionSettings['pass']);
        } catch (PDOException $e) {

            echo "Üzgünüz... Veritabanı bağlantısı sırasında hata oluştu. Lütfen bağlantı bilgilerinizin doğruluğunu kontrol ediniz <br/> \r\n";
            echo "Başarılı bir veritabanı bağlantısı olmadığı için Triton devam edemiyor <br/> \r\n";
            echo "Detaylı Bilgi : <br/> " .  $e->getMessage() . " \r\n";
            die();

        }

        $pdoConnection->exec("DROP TABLE ". $table );

    }
    else if($line == 'N') {

        echo "Process canceled. İşlem iptal edildi. ";
    }

}
else if($argv[1] == 'clean:table') {

    $database = ucfirst($argv[2]);
    $table = ucfirst($argv[3]);

    $line = readlineTriton("Are you sure you want to empty the chart? (Y/N) \r\nTabloyu boşaltmak istediğinizden emin misiniz? (Y/N): ");

    if($line == 'Y') {

        $connectionSettings = file_get_contents("Applications/Databases/". $database . "/connection.ntconfig");

        eval("\$connectionSettings = " .$connectionSettings);

        try {
            $pdoConnection = new PDO("mysql:host=" . $connectionSettings["host"] . ";dbname=" . $database, $connectionSettings['user'], $connectionSettings['pass']);
        } catch (PDOException $e) {

            echo "Üzgünüz... Veritabanı bağlantısı sırasında hata oluştu. Lütfen bağlantı bilgilerinizin doğruluğunu kontrol ediniz <br/> \r\n";
            echo "Başarılı bir veritabanı bağlantısı olmadığı için Triton devam edemiyor <br/> \r\n";
            echo "Detaylı Bilgi : <br/> " .  $e->getMessage() . " \r\n";
            die();

        }

        $pdoConnection->exec("TRUNCATE ". $table );
        echo "\r\nThe query was run.\r\nSorgu çalıştırıldı. \r\n";

    }
    else if($line == 'N') {

        echo "Process canceled. İşlem iptal edildi. ";
    }

}
else
{
    echo '"'. $argv[1] .'" is not recognized.';
}